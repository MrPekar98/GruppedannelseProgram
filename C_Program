#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#define GROUP_MAX_SIZE 6

/* Enumerations */
enum type_t {visionary = 1, idealist, conductor, troubleshooter};
typedef enum type_t personType_t;

/* Structs */
/* Belbin struct */
struct belbinTestData
{
    int plant;
    int monitorEvaluator;
    int specialist;
    int shaper;
    int implementer;
    int completerFinisher;
    int coordinator;
    int teamworker;
    int resourceInvestigator;
};

/* Structs */
/* Main struct: person struct */
struct person
{
    char name[30];
    personType_t type;

    /* Belbin struct declaration */
    struct belbinTestData belbin;
};
typedef struct person personData;

/* Group struct */
struct group
{
    /* Array of members */
    personData members[GROUP_MAX_SIZE];

    /* Average values */
    int averagePlant;
    int averageMonitorEvaluator;
    int averageSpecialist;
    int averageShaper;
    int averageImplementer;
    int averageCompleterFinisher;
    int averageCoordinator;
    int averageTeamworker;
    int averageResourceInvestigator;
};
typedef struct group group;

struct matrix
{
    int value;
    char rowColumn;
    char assignStage;
};
typedef struct matrix matrix;

/* Protocols */
void personDataAssignment(personData *DataArray, int arraySize);
void createGroups(group *groups, int amountOfGroups, int amountOfPersons);
int groupSize(personData *groupMembers);
void assignFirstRound(personData *persons, group *groups, int amountOfGroups);
void averageBelbinTypeAssignment(group *theGroup);
void plantAverageAssign(group *theGroup, int groupSize);

/* Main function */
int main()
{
    printf("Saved textfile must be located in the same directory as this program.\n\n");

    int amountOfStudents;

    printf("Amount of students: ");
    int test = scanf("%d", &amountOfStudents);
    const int amountOfGroups = amountOfStudents / GROUP_MAX_SIZE;

    if (test != 1)        /* Format exception. */
    {
        printf("\nFormat exception.\n");
        exit(1);
    }

    /* Data array: Containing all information about every student. */
    personData *persons = (personData *) malloc(amountOfStudents * sizeof(personData));

    if (persons == NULL)        /* Not enough memory. */
    {
        printf("\nNot enough space on memory.\n");
        exit(1);
    }

    personDataAssignment(persons, amountOfStudents);

    /* Array of groups. */
    group groups[amountOfGroups];
    createGroups(groups, amountOfGroups, amountOfStudents);
    
    assignFirstRound(persons, groups, amountOfGroups);
    
    /* Test */

    return 0;
}

/* Assigning data to main array containing all student. */
void personDataAssignment(personData *DataArray, int arraySize)
{
    FILE *textfile = fopen("TestResultater.txt", "r");

    if (textfile == NULL)       /* If textfile doesn't exist. */
    {
        printf("\nFile does not eixts.\n");
        exit(1);
    }

    int i;
    for (i = 0; i < arraySize; i++)
    {
        fscanf(textfile, "%s %d %d %d %d %d %d %d %d %d %d", DataArray[i].name, &DataArray[i].type, &DataArray[i].belbin.plant, &DataArray[i].belbin.monitorEvaluator, &DataArray[i].belbin.specialist, &DataArray[i].belbin.shaper, &DataArray[i].belbin.implementer, &DataArray[i].belbin.completerFinisher, &DataArray[i].belbin.coordinator, &DataArray[i].belbin.teamworker, &DataArray[i].belbin.resourceInvestigator);
    }

    fclose(textfile);
}

/* Main function for creating groups. */
void createGroups(group *groups, int amountOfGroups, int amountOfPersons)
{
    /* Matrix */
    matrix matrixArray[amountOfGroups][amountOfGroups];
    int i, j, place = 0;
    for (i = 0; i < amountOfPersons; i++)
    {
        
    }
}

/* Returns size of a group. */
int groupSize(personData *groupMembers)
{
    int i = 0;
    for (i; i < GROUP_MAX_SIZE; i++)
    {
        if (groupMembers[i].type != 1 && groupMembers[i].type != 2 && groupMembers[i].type != 3 && groupMembers[i].type != 4)
        {
            break;
        }
    }

    return i;
}

/* Putting one person in each group as first round. */
void assignFirstRound(personData *persons, group *groups, int amountOfGroups)
{
    int i;
    for (i = 0; i < amountOfGroups; i++)
    {
        groups[i].members[0] = persons[i];
    }
}

/* Assigning average values for each Belbin type in a group. */
void averageBelbinTypeAssignment(group *theGroup)
{
    plantAverageAssign(theGroup, groupSize((*theGroup).members));
}

/* Average value for plant type. */
void plantAverageAssign(group *theGroup, int groupSize)
{
    int i = 0, sum = 0;
    for (i;  i < groupSize; i++)
    {
        sum += (*theGroup).members[i].belbin.plant;
    }
    
    (*theGroup).averagePlant = sum / groupSize;
}
