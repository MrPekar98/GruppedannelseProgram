#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#define GROUP_MAX_SIZE 6

/* Enumerations */
enum type_t {visionary = 1, idealist, conductor, troubleshooter};
typedef enum type_t personType_t;

/* Structs */
/* Belbin struct */
struct belbinTestData
{
    int plant;
    int monitorEvaluator;
    int specialist;
    int shaper;
    int implementer;
    int completerFinisher;
    int coordinator;
    int teamworker;
    int resourceInvestigator;
};

/* Structs */
/* Main struct: person struct */
struct person
{
    char name[30];
    personType_t type;

    /* Belbin struct declaration */
    struct belbinTestData belbin;
};
typedef struct person personData;

/* Group struct */
struct group
{
    /* Array of members */
    personData members[GROUP_MAX_SIZE];

    /* Average values */
    int averagePlant;
    int averageMonitorEvaluator;
    int averageSpecialist;
    int averageShaper;
    int averageImplementer;
    int averageCompleterFinisher;
    int averageCoordinator;
    int averageTeamworker;
    int averageResourceInvestigator;
};
typedef struct group group;

struct matrix
{
    int value;
    char mark;
};
typedef struct matrix matrix;

/* Protocols */
void PersonDataAssignment(personData *DataArray, int arraySize);

/* Main function */
int main()
{
    printf("Saved textfile must be located in the same directory as this program.\n\n");

    int amountOfStudents;

    printf("Amount of students: ");
    int test = scanf("%d", &amountOfStudents);

    if (test != 1)        /* Format exception. */
    {
        printf("\nFormat exception.\n");
        exit(1);
    }

    /* Data array: Containing all information about every student. */
    personData *persons = (personData *) malloc(amountOfStudents * sizeof(personData));

    if (persons == NULL)        /* Not enough memory. */
    {
        printf("\nNot enough space on memory.\n");
        exit(1);
    }

    PersonDataAssignment(persons, amountOfStudents);

    /* Array of groups. */
    group groups[amountOfStudents / GROUP_MAX_SIZE];

    return 0;
}

/* Assigning data to main array containing all student. */
void PersonDataAssignment(personData *DataArray, int arraySize)
{
    FILE *textfile = fopen("TestResultater.txt", "r");

    if (textfile == NULL)       /* If textfile doesn't exist. */
    {
        printf("\nFile does not eixts.\n");
        exit(1);
    }

    int i;
    for (i = 0; i < arraySize; i++)
    {
        fscanf(textfile, "%s %d %d %d %d %d %d %d %d %d %d", DataArray[i].name, &DataArray[i].type, &DataArray[i].belbin.plant, &DataArray[i].belbin.monitorEvaluator, &DataArray[i].belbin.specialist, &DataArray[i].belbin.shaper, &DataArray[i].belbin.implementer, &DataArray[i].belbin.completerFinisher, &DataArray[i].belbin.coordinator, &DataArray[i].belbin.teamworker, &DataArray[i].belbin.resourceInvestigator);
    }

    fclose(textfile);
}
